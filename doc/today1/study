
Go语言之讲解GOROOT、GOPATH、GOBIN

go命令依赖一个重要的环境变量：$GOPATH
GOPATH允许多个目录，当有多个目录时，请注意分隔符，多个目录的时候Windows是分号;

当有多个GOPATH时默认将go get获取的包存放在第一个目录下

$GOPATH目录约定有三个子目录
src存放源代码(比如：.go .c .h .s等)   按照golang默认约定，go run，go install等命令的当前工作路径（即在此路径下执行上述命令）。
pkg编译时生成的中间文件（比如：.a）　　golang编译包时
bin编译后生成的可执行文件（为了方便，可以把此目录加入到 $PATH 变量中，如果有多个gopath，那么使用${GOPATH//://bin:}/bin添加所有的bin目录）

代码目录结构规划
GOPATH下的src目录就是接下来开发程序的主要目录，所有的源码都是放在这个目录下面，那么一般我们的做法就是一个目录一个项目，

例如: $GOPATH/src/mymath 表示mymath这个应用包或者可执行应用，这个根据package是main还是其他来决定，main的话就是可执行应用，其他的话就是应用包，这个会在后续详细介绍package。

go环境：go env

set GO111MODULE=
set GOARCH=amd64
set GOBIN=
set GOCACHE=C:\Users\Administrator\AppData\Local\go-build
set GOENV=C:\Users\Administrator\AppData\Roaming\go\env
set GOEXE=.exe
set GOFLAGS=
set GOHOSTARCH=amd64
set GOHOSTOS=windows
set GOINSECURE=
set GOMODCACHE=F:\Go\Golang\pkg\mod
set GONOPROXY=
set GONOSUMDB=
set GOOS=windows
set GOPATH=F:\Go\Golang;H:\Go\bin
set GOPRIVATE=
set GOPROXY=https://goproxy.cn,direct
set GOROOT=H:\Go
set GOSUMDB=sum.golang.org
set GOTMPDIR=
set GOTOOLDIR=H:\Go\pkg\tool\windows_amd64
set GCCGO=gccgo
set AR=ar
set CXX=g++
set CGO_ENABLED=1
set GOMOD=
set CGO_CFLAGS=-g -O2
set CGO_CPPFLAGS=
set CGO_CXXFLAGS=-g -O2
set CGO_FFLAGS=-g -O2
set CGO_LDFLAGS=-g -O2
set PKG_CONFIG=pkg-config
set GOGCCFLAGS=-m64 -mthread
GOROOT
其实就是golang 的安装路径
当你安装好golang之后其实这个就已经有了

GOBIN
首先看一下结构：



我们通常是在project目录下执行go build,例如:

D:\project\src\go_dev\day1\package_example\main>go run main.go
400 100
现在需要编译main.go，golang 会自动去src下找hello目录，因为我的main.go中代码的开通导入了packag main包，所以可以编译成可执行文件，但是这样默认在当前目录下生成可执行文件,虽然可以指定目录，但是还是感觉不是非常方便

d:\project>go build go_dev/day1/package_example\main


所以还有两个非常好用的命令：go get 和go install

go get
go get会做两件事：
1. 从远程下载需要用到的包
2. 执行go install

go install
go install 会生成可执行文件直接放到bin目录下，当然这是有前提的
你编译的是可执行文件，如果是一个普通的包，会被编译生成到pkg目录下该文件是.a结尾



关于go的整体一个开发目录
复制代码
go_project     // go_project为GOPATH目录
  -- bin
     -- myApp1  // 编译生成
     -- myApp2  // 编译生成
     -- myApp3  // 编译生成
  -- pkg
  -- src
     -- myApp1     // project1
        -- models
        -- controllers
        -- others
        -- main.go
     -- myApp2     // project2
        -- models
        -- controllers
        -- others
        -- main.go
     -- myApp3     // project3
        -- models
        -- controllers
        -- others
        -- main.go
复制代码
Linux下配置go环境
复制代码
1、首先下载linux下的go包：https://studygolang.com/dl/golang/go1.9.2.linux-amd64.tar.gz
2、下载之后

tar -zxvf go1.9.2.linux-amd64.tar.gz 解压源码包

3、移动到 /usr/local/go 也就是GOROOT

4、设置GOPATH，还有PATH环境变量

export GOROOT=/usr/local/go #设置为go安装的路径
export GOPATH=$HOME/gocode #默认安装包的路径
export PATH=$PATH:$GOROOT/bin:$GOPATH/bin
复制代码
查看Linux go env
go env

在进行Go语言开发的时候，我们的代码总是会保存在$GOPATH/src目录下。在工程经过go build、go install或go get等指令后，会将下载的第三方包源代码文件放在$GOPATH/src目录下， 产生的二进制可执行文件放在 $GOPATH/bin目录下，生成的中间缓存文件会被保存在 $GOPATH/pkg 下

四种定义方式

定义变量                 var      变量名      变量类型

定义常量                 const  常量名  =  常量值

定义类型                 type    结构体名   (func / interface / struct)

定义方法&函数      func   函数名(){}  /   func (结构体)方法名(){}


golang使胞package来管理定义模块,可以使用import关键字来导入使用。
如果导入的是go自带的包，则会去安装目录$GOROOT/src按包路径加载，如fmt包
如果是我们go get安装或自定义的包，则会去$GOPATH/src下加载


提示异常错误是：exec: "git": executable file not found in %PATH%
处理方法1：可能是因为git没有安装
2：可能是go环境变量有问题，下面环境一定要配置。
    环境变量添加 %GOROOT%\bin



导入GitHub项目文件 ： go get github.com/shineyork/go-sms
结果如下：
PS F:\Go\Golang\src\go2011> go run .\kkk.go
a.go
srm class .go
srm class .go 222
srm class .go 222222
srm u .go
this is sms/email.go init
main
this is sms email







